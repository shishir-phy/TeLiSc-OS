#!/bin/bash
# basic quick install script based on obarun manual install
# ::preface install target device is mounted and has filesystems created to /mnt::
#


# check for root
[[ ${EUID} -ne 0 ]] && echo "::This script must be run as root::" && exit 1



########## Partitioning ##########

lsblk
read -p "Enter the name of the disk[ex. sda] " disk
echo "Disk $disk selected"

echo "Creating partitions...."

# 1 # Create a GPT partition table
parted -s /dev/$disk mklabel gpt

# 2 # Create a prtition for EFI(512MB,FAT32)
parted -s -a optimal /dev/$disk mkpart primary fat32 2048s 263MB
parted -s /dev/$disk name 1 'bios_boot'
parted -s /dev/$disk set 1 bios_grub on

# 3 # Create partition for /boot(512MB)
parted -s -a optimal /dev/$disk mkpart primary btrfs 263MB 775MB
parted -s /dev/$disk name 2 'boot'

# 5 # Create partition for /var(2G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 775MB 8967MB
parted -s /dev/$disk name 3 'var'

# 6 # Create partition for /run(2G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 8967MB 15063MB
parted -s /dev/$disk name 4 'run'

# 7 # Create sub-volume of /var for /var/log(4G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 15063MB 19159MB
parted -s /dev/$disk name 5 'var_log'

# 9 # Create partition /tmp(20G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 19159MB 39687MB
parted -s /dev/$disk name 6 'tmp'

#10 # Create partition for /srv/nfsroot(4G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 39687MB 43783MB
parted -s /dev/$disk name 7 'nfsroot'

#11 # Create partition for /srv/nfsroot/var(8G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 43783MB 51975MB
parted -s /dev/$disk name 8 'nfsroot_var'

#12 # Create partition for /srv/nfsroot/usr(8G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 51975MB 60167MB
parted -s /dev/$disk name 9 'nfsroot_usr'

#13 # Create partition for /srv/http(1G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 60167MB 61191MB
parted -s /dev/$disk name 10 'srv_http'

#14 # Create partition for /srv/smtp(1G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 61191MB 62215MB
parted -s /dev/$disk name 11 'srv_smtp'

#15 # Create partition /srv/boot(512MB)
parted -s -a optimal /dev/$disk mkpart primary btrfs 62215MB 62727MB
parted -s /dev/$disk name 12 'srv_boot'

#16 # Create partition for /clusterapps(50G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 62727MB 113927MB
parted -s /dev/$disk name 13 'clusterapps'

#17 # Create partition / (4G)
parted -s -a optimal /dev/$disk mkpart primary btrfs 113927MB 118023MB
parted -s /dev/$disk name 14 'root'

#18 # Create partition for /home (remaining)
parted -s -a optimal /dev/$disk mkpart primary btrfs 118023MB 100%
parted -s /dev/$disk name 15 'home'

######## FORMATTING #########
echo "Formatting partitions..."

mkfs.fat -F 32 /dev/${disk}1

for i in {2..15}
do
   mkfs.btrfs -f /dev/${disk}$i
done

######## MOUNTING ###########

echo "Mounting partitions"

mount /dev/${disk}14 /mnt
mkdir -p /mnt/boot
mount /dev/${disk}2 /mnt/boot
mkdir -p /mnt/var
mount /dev/${disk}3 /mnt/var
mkdir -p /mnt/run
mount /dev/${disk}4 /mnt/run
mkdir -p /mnt/var/log
mount /dev/${disk}5 /mnt/var/log
mkdir -p /mnt/tmp
mount /dev/${disk}6 /mnt/tmp
mkdir -p /mnt/srv/nfsroot
mount /dev/${disk}7 /mnt/srv/nfsroot
mkdir -p /mnt/srv/nfsroot/var
mount /dev/${disk}8 /mnt/srv/nfsroot/var
mkdir -p /mnt/srv/nfsroot/usr
mount /dev/${disk}9 /mnt/srv/nfsroot/usr
mkdir -p /mnt/srv/http
mount /dev/${disk}10 /mnt/srv/http
mkdir -p /mnt/srv/smtp
mount /dev/${disk}11 /mnt/srv/smtp
mkdir -p /mnt/srv/arch
mount /dev/${disk}12 /mnt/srv/arch
mkdir -p /mnt/clusterapps
mount /dev/${disk}13 /mnt/clusterapps
mkdir -p /mnt/home
mount /dev/${disk}15 /mnt/home



# Variables
ACM="arch-chroot /mnt"
ROOT_DEV=$(df | grep -w /mnt | awk {'print $1'})

# copy live iso environment to /mnt (new install device)
echo "Copy live root image to /mnt "
cp -ax / /mnt

# copy kernel to new install
echo "Add kernel to new install..."
cp -vaT /run/archiso/bootmnt/arch/boot/$(uname -m)/vmlinuz /mnt/boot/vmlinuz-linux
  
# generate fstab for new device
echo "Create /etc/fstab..."
genfstab -U -p /mnt > /mnt/etc/fstab

# remake boot image
echo "Rebuild boot image..."
${ACM} /usr/bin/mkinitcpio -p linux

#installing grub
${ACM} grub-install /dev/$disk
${ACM} grub-mkconfig -o /boot/grub/grub.cfg

#ROOT PASSWORD

  echo "ROOT PASSWORD"
  echo "Enter your new root password"
  ${ACM} "passwd"
 

#setup host name
  echo "HOSTNAME: "
  echo "A host name is a unique name created to identify a machine on a network. Length is restricted to 63 characters."
  read -p "Hostname [ex: telisc]: " host_name
  echo ${host_name} > /mnt/etc/hostname

#Adding user
${ACM} tuseradd


# clean up new install, basically removing archiso files that are needed live
echo "Clean new install..."
rm /mnt/etc/mkinitcpio-archiso.conf
rm -r /mnt/etc/initcpio
rm /mnt/root/tinstall
rm /mnt/root/.zshrc
rm -Rf /mnt/root/boot
rm -Rf /mnt/etc/systemd/system/getty@tty1.service.d/autologin.conf
rm -Rf /mnt/opt/welcome
rm -Rf /mnt/boot/syslinux
rm -Rf /mnt/run/archiso


umount -R /mnt

echo "::Installation complete::"

#Reboot?
read -p "Do you want to REBOOT now? (y/n)" rboot
if [ $rboot = "y" ]; then
	reboot
else
	exit
fi
